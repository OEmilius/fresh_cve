// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cve.proto

/*
Package cve is a generated protocol buffer package.

It is generated from these files:
	cve.proto

It has these top-level messages:
	CveRequest
	CveReply
	Cve
*/
package cve

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// all cves -> filter="all"
type CveRequest struct {
	Filter string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *CveRequest) Reset()                    { *m = CveRequest{} }
func (m *CveRequest) String() string            { return proto.CompactTextString(m) }
func (*CveRequest) ProtoMessage()               {}
func (*CveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CveRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type CveReply struct {
	Cves []*Cve `protobuf:"bytes,1,rep,name=cves" json:"cves,omitempty"`
}

func (m *CveReply) Reset()                    { *m = CveReply{} }
func (m *CveReply) String() string            { return proto.CompactTextString(m) }
func (*CveReply) ProtoMessage()               {}
func (*CveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CveReply) GetCves() []*Cve {
	if m != nil {
		return m.Cves
	}
	return nil
}

type Cve struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Published string   `protobuf:"bytes,2,opt,name=published" json:"published,omitempty"`
	Summary   string   `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Urls      []string `protobuf:"bytes,4,rep,name=urls" json:"urls,omitempty"`
}

func (m *Cve) Reset()                    { *m = Cve{} }
func (m *Cve) String() string            { return proto.CompactTextString(m) }
func (*Cve) ProtoMessage()               {}
func (*Cve) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Cve) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cve) GetPublished() string {
	if m != nil {
		return m.Published
	}
	return ""
}

func (m *Cve) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Cve) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func init() {
	proto.RegisterType((*CveRequest)(nil), "cve.CveRequest")
	proto.RegisterType((*CveReply)(nil), "cve.CveReply")
	proto.RegisterType((*Cve)(nil), "cve.Cve")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Offender service

type OffenderClient interface {
	GetCves(ctx context.Context, in *CveRequest, opts ...grpc.CallOption) (*CveReply, error)
}

type offenderClient struct {
	cc *grpc.ClientConn
}

func NewOffenderClient(cc *grpc.ClientConn) OffenderClient {
	return &offenderClient{cc}
}

func (c *offenderClient) GetCves(ctx context.Context, in *CveRequest, opts ...grpc.CallOption) (*CveReply, error) {
	out := new(CveReply)
	err := grpc.Invoke(ctx, "/cve.Offender/GetCves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Offender service

type OffenderServer interface {
	GetCves(context.Context, *CveRequest) (*CveReply, error)
}

func RegisterOffenderServer(s *grpc.Server, srv OffenderServer) {
	s.RegisterService(&_Offender_serviceDesc, srv)
}

func _Offender_GetCves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffenderServer).GetCves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cve.Offender/GetCves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffenderServer).GetCves(ctx, req.(*CveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Offender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cve.Offender",
	HandlerType: (*OffenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCves",
			Handler:    _Offender_GetCves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cve.proto",
}

func init() { proto.RegisterFile("cve.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x6d, 0x53, 0x76, 0x9b, 0x11, 0x15, 0xe6, 0x20, 0x41, 0xf6, 0x50, 0x82, 0x87, 0x80,
	0xb0, 0x87, 0xf5, 0xe0, 0x07, 0xe8, 0xc1, 0xa3, 0xd0, 0x6f, 0xb0, 0xdb, 0x4c, 0x31, 0x90, 0x75,
	0x63, 0xfe, 0x41, 0xbf, 0xbd, 0x6c, 0xac, 0xf6, 0x36, 0xef, 0xf7, 0x86, 0xc7, 0x7b, 0xc0, 0xc7,
	0x4c, 0x7b, 0xe7, 0x2f, 0xf1, 0x82, 0x6c, 0xcc, 0x24, 0x9f, 0x01, 0xfa, 0x4c, 0x03, 0x7d, 0x27,
	0x0a, 0x11, 0x1f, 0x61, 0x33, 0x19, 0x1b, 0xc9, 0x8b, 0xaa, 0xab, 0x14, 0x1f, 0x16, 0x25, 0x15,
	0xb4, 0xe5, 0xcb, 0xd9, 0x19, 0x77, 0xd0, 0x8c, 0x99, 0x82, 0xa8, 0x3a, 0xa6, 0x6e, 0x0f, 0xed,
	0xfe, 0x1a, 0x78, 0x35, 0x0b, 0x95, 0x47, 0x60, 0x7d, 0x26, 0xbc, 0x87, 0xda, 0xe8, 0x25, 0xa4,
	0x36, 0x1a, 0x77, 0xc0, 0x5d, 0x3a, 0x59, 0x13, 0x3e, 0x49, 0x8b, 0xba, 0xe0, 0x15, 0xa0, 0x80,
	0x6d, 0x48, 0xe7, 0xf3, 0xd1, 0xcf, 0x82, 0x15, 0xef, 0x4f, 0x22, 0x42, 0x93, 0xbc, 0x0d, 0xa2,
	0xe9, 0x98, 0xe2, 0x43, 0xb9, 0x0f, 0x6f, 0xd0, 0x7e, 0x4c, 0x13, 0x7d, 0x69, 0xf2, 0xf8, 0x02,
	0xdb, 0x77, 0x8a, 0x7d, 0xa6, 0x80, 0x0f, 0xff, 0x4d, 0x7e, 0xc7, 0x3c, 0xdd, 0xad, 0xc0, 0xd9,
	0x59, 0xde, 0x9c, 0x36, 0x65, 0xf7, 0xeb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x52, 0x3f,
	0x63, 0x04, 0x01, 0x00, 0x00,
}
